<?php
/** @var Genaker\MagentoMcpAi\Block\Adminhtml\AIAssistant $block */

if (!$block->isAllowed()) {
    return;
}
?>
<style>
.message.message:before {
    position: absolute;
    top: 15px !important;
}

.ai-loading-button {
    animation: pulse 1.5s ease-in-out infinite;
}

@keyframes pulse {
    0% {
        opacity: 0.6;
    }
    50% {
        opacity: 0.3;
    }
    100% {
        opacity: 0.6;
    }
}

.ai-input-disabled {
    background-color: #f5f5f5 !important;
    cursor: not-allowed !important;
}
</style>
<div class="message message" style="background-color: #d2e8ff; padding: 0; margin 0; border-radius: 5px;">
    <div class="message-content">
        <h2 style="display: inline-block; margin: 0; padding-left: 50px !important;">AI Admin Assistant: </h2>
        <form id="ai-assistant-form"  style="margin: 0; display: inline-block;">
                            <input type="text" name="query" id="ai-query" required autocomplete="off" style="margin: 0; padding: 0; width: 400px;" />
            <button type="button" id="send-query">Think</button>
        </form>
        <div id="ai-response"></div>
    </div>
</div>
<?php
// Get the ObjectManager instance
$objectManager = \Magento\Framework\App\ObjectManager::getInstance();

// Get the admin URL builder and helper
$backendHelper = $objectManager->create('Magento\Backend\Helper\Data');
$urlBuilder = $objectManager->get('Magento\Backend\Model\UrlInterface');

// Get the admin base URL
$adminBaseUrl = $backendHelper->getHomePageUrl();

// Get the secret key for admin URLs
$secretKey = $urlBuilder->getSecretKey('adminhtml', 'index', 'index');
?>
<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function() {
        var form = document.getElementById('ai-assistant-form');
        var queryInput = document.getElementById('ai-query');
        var sendButton = document.getElementById('send-query');

        // Prevent form submission on Enter key press
        form.addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent the default form submission
        });

        // Add event listener for Enter key on the input field
        queryInput.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // Prevent the default action
                sendButton.click(); // Trigger the click event on the "Think" button
            }
        });

        // Get the full admin URL including the admin path
        var baseUrl = '<?= $block->getBaseUrl() ?>'; // Ensure getAdminUrl() returns the full admin URL
        var adminUrl = '<?= $adminBaseUrl ?>';
        var apiUrl = baseUrl + 'rest/V1/menuai/query';

        sendButton.addEventListener('click', function() {
            var userQuery = queryInput.value;
            var apiKey = '<?= $block->escapeHtml($block->getApiKey()) ?>'; // Get the API key from the block

            // Show loading state on button
            var originalButtonText = sendButton.textContent;
            sendButton.innerHTML = '‚è≥ Thinking...';
            sendButton.disabled = true;
            sendButton.classList.add('ai-loading-button');
            sendButton.style.cursor = 'not-allowed';
            queryInput.disabled = true;
            queryInput.classList.add('ai-input-disabled');

            fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ userQuery: userQuery, api_key: apiKey }) // Only include query and api_key in JSON
            })
            .then(response => {
                // Show loading state
                document.getElementById('ai-response').innerHTML = `
                    <div style="padding: 10px; text-align: center;">
                        <div style="margin-bottom: 10px;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <div style="color: #6c757d;">
                            Processing your request...
                        </div>
                    </div>
                `;
                
                // Check for HTTP errors
                if (!response.ok) {
                    if (response.status === 500) {
                        throw new Error(`Server Error (500): Internal server error occurred. Please check server logs.`);
                    } else if (response.status === 404) {
                        throw new Error(`Not Found (404): API endpoint not found.`);
                    } else if (response.status === 403) {
                        throw new Error(`Forbidden (403): Access denied. Check API permissions.`);
                    } else if (response.status === 401) {
                        throw new Error(`Unauthorized (401): Invalid API key or authentication failed.`);
                    } else {
                        throw new Error(`HTTP Error (${response.status}): ${response.statusText}`);
                    }
                }
                
                return response.json();
            })
            .then(data => {
                // Restore button state
                sendButton.innerHTML = originalButtonText;
                sendButton.disabled = false;
                sendButton.classList.remove('ai-loading-button');
                sendButton.style.cursor = 'pointer';
                queryInput.disabled = false;
                queryInput.classList.remove('ai-input-disabled');
                
                // Clear input field after successful response
                queryInput.value = '';
                
                // Hide loading state
                document.getElementById('ai-response').innerHTML = '';
                // Process the response
                var responseText = data[0];
                var responseUrl = data[1];
                var responseHash = data[2];
                if(responseHash){
                    responseHash = "#" + responseHash;
                } else {
                    responseHash = "";
                }
                // Transform {base_url} patterns to actual admin URLs
                var processedText = responseText
              
                    .replace(/\[\[(.*?)\]\]\((.*?)\)/g, '<a href="$2" target="_blank" style="color: #3498db; text-decoration: none; font-weight: bold;">üîó $1</a>')
                    .replace(/\n/g, '<br>')
                    .replace(/\n\n/g, '<p>')
                    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                    .replace(/- \*(.*?)\n/g, '<li style="list-style-type: disc; margin-left: 20px;">‚Ä¢ $1</li><br>')
                    .replace(/- \*(.*?)$/g, '<li style="list-style-type: disc; margin-left: 20px;">‚Ä¢ $1</li>');

                var responseHtml = `
                    <div style="padding: 10px; background-color: #f8f9fa; border-radius: 4px;">
                        <div style="margin-bottom: 10px;">
                            <strong style="color: #2c3e50;">Response:</strong>
                            <div style="margin-top: 5px; color: #34495e; line-height: 1.6;">
                                ${processedText}
                            </div>
                        </div>
                        ${responseUrl ? `
                            <div style="margin-top: 15px;">
                                <a href="${responseUrl}${responseHash}" 
                                   target="_blank" 
                                   style="color: #3498db; text-decoration: none;">
                                    üåê Go to URL: ${responseUrl}${responseHash}
                                </a>
                            </div>
                        ` : ''}
                    </div>
                `;

                document.getElementById('ai-response').innerHTML = responseHtml;
            })
            .catch(error => {
                // Restore button state
                sendButton.innerHTML = originalButtonText;
                sendButton.disabled = false;
                sendButton.classList.remove('ai-loading-button');
                sendButton.style.cursor = 'pointer';
                queryInput.disabled = false;
                queryInput.classList.remove('ai-input-disabled');
                
                // Enhanced error display
                document.getElementById('ai-response').innerHTML = `
                    <div style="background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; padding: 15px; border-radius: 5px; margin-top: 10px;">
                        <div style="font-weight: bold; margin-bottom: 10px;">
                            ‚ùå Request Failed
                        </div>
                        <div style="margin-bottom: 10px;">
                            ${error.message || error}
                        </div>
                        <div style="font-size: 12px; color: #856404; background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 8px; border-radius: 3px;">
                            <strong>üí° Troubleshooting Tips:</strong><br>
                            ‚Ä¢ Check if the API key is correctly configured<br>
                            ‚Ä¢ Verify server logs for detailed error information<br>
                            ‚Ä¢ Ensure OpenAI API service is accessible<br>
                            ‚Ä¢ Try refreshing the page and retry
                        </div>
                    </div>
                `;
            });
        });
    });
</script>